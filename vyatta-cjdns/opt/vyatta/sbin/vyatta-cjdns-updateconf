#!/usr/bin/python

import json
import sys

data = {}

with open('/config/cjdroute.' + sys.argv[1] + '.conf') as data_file:
    data = json.load(data_file)

def setStandardConfiguration():
    data['logging']['logTo'] = ""
    data['noBackground'] = 1
    data['interfaces']['UDPInterface'] = []
    data['interfaces']['ETHInterface'] = []
    data['authorizedPasswords'] = []

def addAuthorizedPassword(user, password):
    data['authorizedPasswords'].append(
        { "user": user, "password": password }
    )

def updateAuthorizedPassword(user, password):
    for i in range(len(data['authorizedPasswords'])):
        if data['authorizedPasswords'][i]['user'] == user:
            data['authorizedPasswords'][i]['password'] = password

def deleteAuthorizedPassword(user):
    for i in range(len(data['authorizedPasswords'])):
        if data['authorizedPasswords'][i]['user'] == user:
            del data['authorizedPasswords'][i]

def addUDPInterface(interface):
    if int(interface) > len(data['interfaces']['UDPInterface']):
        print "Invalid interface ID; must be in sequence with previous interface"
    else:
        try:
            assert data['interfaces']['UDPInterface'][int(interface)] is not dict
        except IndexError:
            data['interfaces']['UDPInterface'].insert(int(interface), {})
        finally:
            data['interfaces']['UDPInterface'][int(interface)] = {
                "bind": "",
                "connectTo": {}
            }

def deleteUDPInterface(interface):
    if int(interface) >= len(data['interfaces']['UDPInterface']):
        print "Invalid interface ID; must be a configured interface ID"
    else:
        if type(data['interfaces']['UDPInterface'][int(interface)]) is dict:
            data['interfaces']['UDPInterface'][int(interface)] = {}

def addUDPConnectTo(interface, endpoint):
    data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint] = {}

def updateUDPConnectToPublicKey(interface, endpoint, publicKey):
    if endpoint not in data['interfaces']['UDPInterface'][0]['connectTo']:
        data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint] = {}
    data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint]['publicKey'] = publicKey

def updateUDPConnectToPassword(interface, endpoint, password):
    if endpoint not in data['interfaces']['UDPInterface'][0]['connectTo']:
        data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint] = {}
    data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint]['password'] = password

def deleteUDPConnectTo(interface, endpoint):
    del data['interfaces']['UDPInterface'][int(interface)]['connectTo'][endpoint]

def updateUDPBindTo(interface, endpoint):
    data['interfaces']['UDPInterface'][int(interface)]['bind'] = endpoint

def addEthernetInterface(interface):
    if int(interface) > len(data['interfaces']['ETHInterface']):
        print "Invalid interface ID; must be in sequence with previous interface"
    else:
        try:
            assert data['interfaces']['ETHInterface'][int(interface)] is not dict
        except IndexError:
            data['interfaces']['ETHInterface'].insert(int(interface), {})
        finally:
            data['interfaces']['ETHInterface'][int(interface)] = {
                "bind": "",
                "beacon": "",
                "connectTo": {}
            }

def updateEthernetBindTo(interface, endpoint):
    data['interfaces']['ETHInterface'][int(interface)]['bind'] = endpoint

def updateEthernetBeacon(interface, beaconmode):
    data['interfaces']['ETHInterface'][int(interface)]['beacon'] = int(beaconmode)

def deleteEthernetInterface(interface):
    if int(interface) >= len(data['interfaces']['ETHInterface']):
        print "Invalid interface ID; must be a configured interface ID"
    else:
        if type(data['interfaces']['ETHInterface'][int(interface)]) is dict:
            data['interfaces']['ETHInterface'][int(interface)] = {}

def updateAdminBindAddress(address):
    data['admin']['bind'] = address

def updateAdminPassword(password):
    data['admin']['password'] = password

def updatePublicKey(publicKey):
    data['publicKey'] = publicKey

def updatePrivateKey(privateKey):
    data['privateKey'] = privateKey

def updateIPv6Address(address):
    data['ipv6'] = address

def updateTunDevice(device):
    data['router']['interface']['type'] = "TUNInterface"
    data['router']['interface']['tunDevice'] = device

try:
    if sys.argv[2] == "setStandardConfiguration": setStandardConfiguration()
    if sys.argv[2] == "addAuthorizedPassword": addAuthorizedPassword(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "updateAuthorizedPassword": updateAuthorizedPassword(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "deleteAuthorizedPassword": deleteAuthorizedPassword(sys.argv[3])
    if sys.argv[2] == "addUDPInterface": addUDPInterface(sys.argv[3])
    if sys.argv[2] == "deleteUDPInterface": deleteUDPInterface(sys.argv[3])
    if sys.argv[2] == "addUDPConnectTo": addUDPConnectTo(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "deleteUDPConnectTo": deleteUDPConnectTo(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "updateUDPConnectToPublicKey": updateUDPConnectToPublicKey(sys.argv[3], sys.argv[4], sys.argv[5])
    if sys.argv[2] == "updateUDPConnectToPassword": updateUDPConnectToPassword(sys.argv[3], sys.argv[4], sys.argv[5])
    if sys.argv[2] == "updateUDPBindTo": updateUDPBindTo(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "addEthernetInterface": addEthernetInterface(sys.argv[3])
    if sys.argv[2] == "deleteEthernetInterface": deleteEthernetInterface(sys.argv[3])
    if sys.argv[2] == "updateEthernetBindTo": updateEthernetBindTo(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "updateEthernetBeacon": updateEthernetBeacon(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "updateAdminBindAddress": updateAdminBindAddress(sys.argv[3])
    if sys.argv[2] == "updateAdminPassword": updateAdminPassword(sys.argv[3])
    if sys.argv[2] == "updatePublicKey": updatePublicKey(sys.argv[3])
    if sys.argv[2] == "updatePrivateKey": updatePrivateKey(sys.argv[3])
    if sys.argv[2] == "updateIPv6Address": updateIPv6Address(sys.argv[3])
    if sys.argv[2] == "updateTunDevice": updateTunDevice(sys.argv[3])
except IndexError:
    print "Incorrect number of parameters supplied"
finally:
    with open('/config/cjdroute.' + sys.argv[1] + '.conf', 'w') as outfile:
        json.dump(data, outfile, indent=4)
