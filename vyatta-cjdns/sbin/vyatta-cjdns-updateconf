#!/usr/bin/python

import json
import sys

data = {}

with open('cjdroute.' + sys.argv[1] + '.conf') as data_file:
    data = json.load(data_file)

def setStandardConfiguration():
    data['logging']['logTo'] = "stdout"
    data['noBackground'] = 1
    data['security']['exemptAngel'] = 1

def addAuthorizedPassword(password):
    data['authorizedPasswords'].append(
        { "password": password }
    )

def deleteAuthorizedPassword(password):
    data['authorizedPasswords'].remove(
        { "password": password }
    )

def addUDPConnectTo(endpoint):
    data['interfaces']['UDPInterface'][0]['connectTo'][endpoint] = {}

def updateUDPConnectToPublicKey(endpoint, publicKey):
    if endpoint not in data['interfaces']['UDPInterface'][0]['connectTo']:
        data['interfaces']['UDPInterface'][0]['connectTo'][endpoint] = {}
    data['interfaces']['UDPInterface'][0]['connectTo'][endpoint]['publicKey'] = publicKey

def updateUDPConnectToPassword(endpoint, password):
    if endpoint not in data['interfaces']['UDPInterface'][0]['connectTo']:
        data['interfaces']['UDPInterface'][0]['connectTo'][endpoint] = {}
    data['interfaces']['UDPInterface'][0]['connectTo'][endpoint]['password'] = password

def deleteUDPConnectTo(endpoint):
    del data['interfaces']['UDPInterface'][0]['connectTo'][endpoint]

def updateUDPBindTo(endpoint):
    data['interfaces']['UDPInterface'][0]['bind'] = endpoint

def updateAdminBindAddress(address):
    data['admin']['bind'] = address

def updateAdminPassword(password):
    data['admin']['password'] = password

def updatePublicKey(publicKey):
    data['publicKey'] = publicKey

def updatePrivateKey(privateKey):
    data['privateKey'] = privateKey

def updateIPv6Address(address):
    data['ipv6'] = address

def updateTunDevice(device):
    data['router']['interface']['type'] = "TUNInterface"
    data['router']['interface']['tunDevice'] = device

try:
    if sys.argv[2] == "setStandardConfiguration": setStandardConfiguration()
    if sys.argv[2] == "addAuthorizedPassword": addAuthorizedPassword(sys.argv[3])
    if sys.argv[2] == "deleteAuthorizedPassword": deleteAuthorizedPassword(sys.argv[3])
    if sys.argv[2] == "addUDPConnectTo": addUDPConnectTo(sys.argv[3])
    if sys.argv[2] == "updateUDPConnectToPublicKey": updateUDPConnectToPublicKey(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "updateUDPConnectToPassword": updateUDPConnectToPassword(sys.argv[3], sys.argv[4])
    if sys.argv[2] == "deleteUDPConnectTo": deleteUDPConnectTo(sys.argv[3])
    if sys.argv[2] == "updateUDPBindTo": updateUDPBindTo(sys.argv[3])
    if sys.argv[2] == "updateAdminBindAddress": updateAdminBindAddress(sys.argv[3])
    if sys.argv[2] == "updateAdminPassword": updateAdminPassword(sys.argv[3])
    if sys.argv[2] == "updatePublicKey": updatePublicKey(sys.argv[3])
    if sys.argv[2] == "updatePrivateKey": updatePrivateKey(sys.argv[3])
    if sys.argv[2] == "updateIPv6Address": updateIPv6Address(sys.argv[3])
    if sys.argv[2] == "updateTunDevice": updateTunDevice(sys.argv[3])
except IndexError:
    print "Incorrect number of parameters supplied"
finally:
    with open('cjdroute.' + sys.argv[1] + '.conf', 'w') as outfile:
        json.dump(data, outfile, indent=4)
